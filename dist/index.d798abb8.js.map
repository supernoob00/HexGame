{"mappings":"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","sources":["node_modules/@parcel/runtime-browser-hmr/lib/runtime-f0f89458ff2bd3f1.js","src/Main.ts","src/AIGameController.ts","src/Token.ts","node_modules/@parcel/transformer-js/src/esmodule-helpers.js","src/GameEvaluator.ts","src/Board.ts","src/HexNode.ts","src/Deque.ts","node_modules/@parcel/node-resolver-core/lib/_empty.js","src/Display.ts","src/Game.ts","src/LocalGameController.ts"],"sourcesContent":["var HMR_HOST = null;var HMR_PORT = null;var HMR_SECURE = false;var HMR_ENV_HASH = \"d6ea1d42532a7575\";module.bundle.HMR_BUNDLE_ID = \"0b9aed92d798abb8\";\"use strict\";\n\n/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, chrome, browser, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */\n/*::\nimport type {\n  HMRAsset,\n  HMRMessage,\n} from '@parcel/reporter-dev-server/src/HMRServer.js';\ninterface ParcelRequire {\n  (string): mixed;\n  cache: {|[string]: ParcelModule|};\n  hotData: {|[string]: mixed|};\n  Module: any;\n  parent: ?ParcelRequire;\n  isParcelRequire: true;\n  modules: {|[string]: [Function, {|[string]: string|}]|};\n  HMR_BUNDLE_ID: string;\n  root: ParcelRequire;\n}\ninterface ParcelModule {\n  hot: {|\n    data: mixed,\n    accept(cb: (Function) => void): void,\n    dispose(cb: (mixed) => void): void,\n    // accept(deps: Array<string> | string, cb: (Function) => void): void,\n    // decline(): void,\n    _acceptCallbacks: Array<(Function) => void>,\n    _disposeCallbacks: Array<(mixed) => void>,\n  |};\n}\ninterface ExtensionContext {\n  runtime: {|\n    reload(): void,\n    getURL(url: string): string;\n    getManifest(): {manifest_version: number, ...};\n  |};\n}\ndeclare var module: {bundle: ParcelRequire, ...};\ndeclare var HMR_HOST: string;\ndeclare var HMR_PORT: string;\ndeclare var HMR_ENV_HASH: string;\ndeclare var HMR_SECURE: boolean;\ndeclare var chrome: ExtensionContext;\ndeclare var browser: ExtensionContext;\ndeclare var __parcel__import__: (string) => Promise<void>;\ndeclare var __parcel__importScripts__: (string) => Promise<void>;\ndeclare var globalThis: typeof self;\ndeclare var ServiceWorkerGlobalScope: Object;\n*/\nvar OVERLAY_ID = '__parcel__error__overlay__';\nvar OldModule = module.bundle.Module;\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData[moduleName],\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function (fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function (fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n  module.bundle.hotData[moduleName] = undefined;\n}\nmodule.bundle.Module = Module;\nmodule.bundle.hotData = {};\nvar checkedAssets /*: {|[string]: boolean|} */, assetsToDispose /*: Array<[ParcelRequire, string]> */, assetsToAccept /*: Array<[ParcelRequire, string]> */;\n\nfunction getHostname() {\n  return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');\n}\nfunction getPort() {\n  return HMR_PORT || location.port;\n}\n\n// eslint-disable-next-line no-redeclare\nvar parent = module.bundle.parent;\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = getHostname();\n  var port = getPort();\n  var protocol = HMR_SECURE || location.protocol == 'https:' && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? 'wss' : 'ws';\n  var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/');\n\n  // Web extension context\n  var extCtx = typeof chrome === 'undefined' ? typeof browser === 'undefined' ? null : browser : chrome;\n\n  // Safari doesn't support sourceURL in error stacks.\n  // eval may also be disabled via CSP, so do a quick check.\n  var supportsSourceURL = false;\n  try {\n    (0, eval)('throw new Error(\"test\"); //# sourceURL=test.js');\n  } catch (err) {\n    supportsSourceURL = err.stack.includes('test.js');\n  }\n\n  // $FlowFixMe\n  ws.onmessage = async function (event /*: {data: string, ...} */) {\n    checkedAssets = {} /*: {|[string]: boolean|} */;\n    assetsToAccept = [];\n    assetsToDispose = [];\n    var data /*: HMRMessage */ = JSON.parse(event.data);\n    if (data.type === 'update') {\n      // Remove error overlay if there is one\n      if (typeof document !== 'undefined') {\n        removeErrorOverlay();\n      }\n      let assets = data.assets.filter(asset => asset.envHash === HMR_ENV_HASH);\n\n      // Handle HMR Update\n      let handled = assets.every(asset => {\n        return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);\n      });\n      if (handled) {\n        console.clear();\n\n        // Dispatch custom event so other runtimes (e.g React Refresh) are aware.\n        if (typeof window !== 'undefined' && typeof CustomEvent !== 'undefined') {\n          window.dispatchEvent(new CustomEvent('parcelhmraccept'));\n        }\n        await hmrApplyUpdates(assets);\n\n        // Dispose all old assets.\n        let processedAssets = {} /*: {|[string]: boolean|} */;\n        for (let i = 0; i < assetsToDispose.length; i++) {\n          let id = assetsToDispose[i][1];\n          if (!processedAssets[id]) {\n            hmrDispose(assetsToDispose[i][0], id);\n            processedAssets[id] = true;\n          }\n        }\n\n        // Run accept callbacks. This will also re-execute other disposed assets in topological order.\n        processedAssets = {};\n        for (let i = 0; i < assetsToAccept.length; i++) {\n          let id = assetsToAccept[i][1];\n          if (!processedAssets[id]) {\n            hmrAccept(assetsToAccept[i][0], id);\n            processedAssets[id] = true;\n          }\n        }\n      } else fullReload();\n    }\n    if (data.type === 'error') {\n      // Log parcel errors to console\n      for (let ansiDiagnostic of data.diagnostics.ansi) {\n        let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;\n        console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\\n' + stack + '\\n\\n' + ansiDiagnostic.hints.join('\\n'));\n      }\n      if (typeof document !== 'undefined') {\n        // Render the fancy html overlay\n        removeErrorOverlay();\n        var overlay = createErrorOverlay(data.diagnostics.html);\n        // $FlowFixMe\n        document.body.appendChild(overlay);\n      }\n    }\n  };\n  ws.onerror = function (e) {\n    console.error(e.message);\n  };\n  ws.onclose = function () {\n    console.warn('[parcel] 🚨 Connection to the HMR server was lost');\n  };\n}\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] ✨ Error resolved');\n  }\n}\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  let errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n  for (let diagnostic of diagnostics) {\n    let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame) => {\n      return `${p}\n<a href=\"/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}\" style=\"text-decoration: underline; color: #888\" onclick=\"fetch(this.href); return false\">${frame.location}</a>\n${frame.code}`;\n    }, '') : diagnostic.stack;\n    errorHTML += `\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          🚨 ${diagnostic.message}\n        </div>\n        <pre>${stack}</pre>\n        <div>\n          ${diagnostic.hints.map(hint => '<div>💡 ' + hint + '</div>').join('')}\n        </div>\n        ${diagnostic.documentation ? `<div>📝 <a style=\"color: violet\" href=\"${diagnostic.documentation}\" target=\"_blank\">Learn more</a></div>` : ''}\n      </div>\n    `;\n  }\n  errorHTML += '</div>';\n  overlay.innerHTML = errorHTML;\n  return overlay;\n}\nfunction fullReload() {\n  if ('reload' in location) {\n    location.reload();\n  } else if (extCtx && extCtx.runtime && extCtx.runtime.reload) {\n    extCtx.runtime.reload();\n  }\n}\nfunction getParents(bundle, id) /*: Array<[ParcelRequire, string]> */{\n  var modules = bundle.modules;\n  if (!modules) {\n    return [];\n  }\n  var parents = [];\n  var k, d, dep;\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {\n        parents.push([bundle, k]);\n      }\n    }\n  }\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n  return parents;\n}\nfunction updateLink(link) {\n  var href = link.getAttribute('href');\n  if (!href) {\n    return;\n  }\n  var newLink = link.cloneNode();\n  newLink.onload = function () {\n    if (link.parentNode !== null) {\n      // $FlowFixMe\n      link.parentNode.removeChild(link);\n    }\n  };\n  newLink.setAttribute('href',\n  // $FlowFixMe\n  href.split('?')[0] + '?' + Date.now());\n  // $FlowFixMe\n  link.parentNode.insertBefore(newLink, link.nextSibling);\n}\nvar cssTimeout = null;\nfunction reloadCSS() {\n  if (cssTimeout) {\n    return;\n  }\n  cssTimeout = setTimeout(function () {\n    var links = document.querySelectorAll('link[rel=\"stylesheet\"]');\n    for (var i = 0; i < links.length; i++) {\n      // $FlowFixMe[incompatible-type]\n      var href /*: string */ = links[i].getAttribute('href');\n      var hostname = getHostname();\n      var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\\\/\\\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());\n      var absolute = /^https?:\\/\\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;\n      if (!absolute) {\n        updateLink(links[i]);\n      }\n    }\n    cssTimeout = null;\n  }, 50);\n}\nfunction hmrDownload(asset) {\n  if (asset.type === 'js') {\n    if (typeof document !== 'undefined') {\n      let script = document.createElement('script');\n      script.src = asset.url + '?t=' + Date.now();\n      if (asset.outputFormat === 'esmodule') {\n        script.type = 'module';\n      }\n      return new Promise((resolve, reject) => {\n        var _document$head;\n        script.onload = () => resolve(script);\n        script.onerror = reject;\n        (_document$head = document.head) === null || _document$head === void 0 ? void 0 : _document$head.appendChild(script);\n      });\n    } else if (typeof importScripts === 'function') {\n      // Worker scripts\n      if (asset.outputFormat === 'esmodule') {\n        return __parcel__import__(asset.url + '?t=' + Date.now());\n      } else {\n        return new Promise((resolve, reject) => {\n          try {\n            __parcel__importScripts__(asset.url + '?t=' + Date.now());\n            resolve();\n          } catch (err) {\n            reject(err);\n          }\n        });\n      }\n    }\n  }\n}\nasync function hmrApplyUpdates(assets) {\n  global.parcelHotUpdate = Object.create(null);\n  let scriptsToRemove;\n  try {\n    // If sourceURL comments aren't supported in eval, we need to load\n    // the update from the dev server over HTTP so that stack traces\n    // are correct in errors/logs. This is much slower than eval, so\n    // we only do it if needed (currently just Safari).\n    // https://bugs.webkit.org/show_bug.cgi?id=137297\n    // This path is also taken if a CSP disallows eval.\n    if (!supportsSourceURL) {\n      let promises = assets.map(asset => {\n        var _hmrDownload;\n        return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch(err => {\n          // Web extension bugfix for Chromium\n          // https://bugs.chromium.org/p/chromium/issues/detail?id=1255412#c12\n          if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3) {\n            if (typeof ServiceWorkerGlobalScope != 'undefined' && global instanceof ServiceWorkerGlobalScope) {\n              extCtx.runtime.reload();\n              return;\n            }\n            asset.url = extCtx.runtime.getURL('/__parcel_hmr_proxy__?url=' + encodeURIComponent(asset.url + '?t=' + Date.now()));\n            return hmrDownload(asset);\n          }\n          throw err;\n        });\n      });\n      scriptsToRemove = await Promise.all(promises);\n    }\n    assets.forEach(function (asset) {\n      hmrApply(module.bundle.root, asset);\n    });\n  } finally {\n    delete global.parcelHotUpdate;\n    if (scriptsToRemove) {\n      scriptsToRemove.forEach(script => {\n        if (script) {\n          var _document$head2;\n          (_document$head2 = document.head) === null || _document$head2 === void 0 ? void 0 : _document$head2.removeChild(script);\n        }\n      });\n    }\n  }\n}\nfunction hmrApply(bundle /*: ParcelRequire */, asset /*:  HMRAsset */) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (asset.type === 'css') {\n    reloadCSS();\n  } else if (asset.type === 'js') {\n    let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];\n    if (deps) {\n      if (modules[asset.id]) {\n        // Remove dependencies that are removed and will become orphaned.\n        // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.\n        let oldDeps = modules[asset.id][1];\n        for (let dep in oldDeps) {\n          if (!deps[dep] || deps[dep] !== oldDeps[dep]) {\n            let id = oldDeps[dep];\n            let parents = getParents(module.bundle.root, id);\n            if (parents.length === 1) {\n              hmrDelete(module.bundle.root, id);\n            }\n          }\n        }\n      }\n      if (supportsSourceURL) {\n        // Global eval. We would use `new Function` here but browser\n        // support for source maps is better with eval.\n        (0, eval)(asset.output);\n      }\n\n      // $FlowFixMe\n      let fn = global.parcelHotUpdate[asset.id];\n      modules[asset.id] = [fn, deps];\n    } else if (bundle.parent) {\n      hmrApply(bundle.parent, asset);\n    }\n  }\n}\nfunction hmrDelete(bundle, id) {\n  let modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (modules[id]) {\n    // Collect dependencies that will become orphaned when this module is deleted.\n    let deps = modules[id][1];\n    let orphans = [];\n    for (let dep in deps) {\n      let parents = getParents(module.bundle.root, deps[dep]);\n      if (parents.length === 1) {\n        orphans.push(deps[dep]);\n      }\n    }\n\n    // Delete the module. This must be done before deleting dependencies in case of circular dependencies.\n    delete modules[id];\n    delete bundle.cache[id];\n\n    // Now delete the orphans.\n    orphans.forEach(id => {\n      hmrDelete(module.bundle.root, id);\n    });\n  } else if (bundle.parent) {\n    hmrDelete(bundle.parent, id);\n  }\n}\nfunction hmrAcceptCheck(bundle /*: ParcelRequire */, id /*: string */, depsByBundle /*: ?{ [string]: { [string]: string } }*/) {\n  if (hmrAcceptCheckOne(bundle, id, depsByBundle)) {\n    return true;\n  }\n\n  // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.\n  let parents = getParents(module.bundle.root, id);\n  let accepted = false;\n  while (parents.length > 0) {\n    let v = parents.shift();\n    let a = hmrAcceptCheckOne(v[0], v[1], null);\n    if (a) {\n      // If this parent accepts, stop traversing upward, but still consider siblings.\n      accepted = true;\n    } else {\n      // Otherwise, queue the parents in the next level upward.\n      let p = getParents(module.bundle.root, v[1]);\n      if (p.length === 0) {\n        // If there are no parents, then we've reached an entry without accepting. Reload.\n        accepted = false;\n        break;\n      }\n      parents.push(...p);\n    }\n  }\n  return accepted;\n}\nfunction hmrAcceptCheckOne(bundle /*: ParcelRequire */, id /*: string */, depsByBundle /*: ?{ [string]: { [string]: string } }*/) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {\n    // If we reached the root bundle without finding where the asset should go,\n    // there's nothing to do. Mark as \"accepted\" so we don't reload the page.\n    if (!bundle.parent) {\n      return true;\n    }\n    return hmrAcceptCheck(bundle.parent, id, depsByBundle);\n  }\n  if (checkedAssets[id]) {\n    return true;\n  }\n  checkedAssets[id] = true;\n  var cached = bundle.cache[id];\n  assetsToDispose.push([bundle, id]);\n  if (!cached || cached.hot && cached.hot._acceptCallbacks.length) {\n    assetsToAccept.push([bundle, id]);\n    return true;\n  }\n}\nfunction hmrDispose(bundle /*: ParcelRequire */, id /*: string */) {\n  var cached = bundle.cache[id];\n  bundle.hotData[id] = {};\n  if (cached && cached.hot) {\n    cached.hot.data = bundle.hotData[id];\n  }\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData[id]);\n    });\n  }\n  delete bundle.cache[id];\n}\nfunction hmrAccept(bundle /*: ParcelRequire */, id /*: string */) {\n  // Execute the module.\n  bundle(id);\n\n  // Run the accept callbacks in the new version of the module.\n  var cached = bundle.cache[id];\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      var assetsToAlsoAccept = cb(function () {\n        return getParents(module.bundle.root, id);\n      });\n      if (assetsToAlsoAccept && assetsToAccept.length) {\n        assetsToAlsoAccept.forEach(function (a) {\n          hmrDispose(a[0], a[1]);\n        });\n\n        // $FlowFixMe[method-unbinding]\n        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);\n      }\n    });\n  }\n}","import { AIGameController } from \"./AIGameController\";\nimport { Display } from \"./Display\";\nimport { Game } from \"./Game\";\nimport { LocalGameController } from \"./LocalGameController\";\n\nlet game: Game = new Game(11);\nlet display: Display = new Display(4, game);\n\nfunction startTwoPlayerGame() {\n    display.clearDisplay();\n    display.CANVAS.replaceWith(display.CANVAS.cloneNode(true));\n    game = new Game(11);\n    display = new Display(4, game);\n\n    display.draw();\n    display.addInputHandling(new LocalGameController(display));\n}\n\nfunction startAIGame() {\n    display.clearDisplay();\n    display.CANVAS.replaceWith(display.CANVAS.cloneNode(true));\n    game = new Game(11);\n    display = new Display(4, game);\n    display.draw();\n    const controller = new AIGameController(display);\n\n    const selectedRadioButton: HTMLInputElement = document.querySelector('input[name=\"player-start-color\"]:checked');\n    switch (selectedRadioButton.value) {\n        case \"player-red\":\n            // do nothing\n            break;\n        case \"player-blue\":\n            setTimeout(controller.aiMove.bind(controller), 500);\n            break;\n        case \"player-random-color\":\n            if (Math.random() < 0.5) {\n                setTimeout(controller.aiMove.bind(controller), 500);\n            }\n            break;\n        default:\n            throw new Error(\"Unexpected value.\");\n    }\n    display.addInputHandling(controller);\n}\n\n// event handler for new game button\nconst newGameButton = document.getElementById(\"new-game-button\");\nnewGameButton.onclick = () => {\n    newGameButton.classList.add(\"button-highlight\");\n    newGameAIButton.classList.remove(\"button-highlight\");\n    startTwoPlayerGame();\n};\n\n// event handler for new game with AI button\nconst newGameAIButton = document.getElementById(\"new-game-ai-button\");\nnewGameAIButton.onclick = () => {\n    newGameAIButton.classList.add(\"button-highlight\");\n    newGameButton.classList.remove(\"button-highlight\");\n    startAIGame();\n}\n\n// start game\nstartTwoPlayerGame();\n","import { Token } from \"./Token\";\nimport { Game } from \"./Game\";\nimport { Display } from \"./Display\";\nimport { Controller } from \"./Controller\";\nimport { GameEvaluator } from \"./GameEvaluator\";\nimport { HexNode } from \"./HexNode\";\n\nexport class AIGameController implements Controller {\n    // TODO: create openings table\n    public static readonly RED_OPENINGS: HexNode[];\n\n    private display: Display;\n    private game: Game;\n    private evaluator: GameEvaluator;\n    private firstMovePlayed: boolean;\n\n    constructor(display: Display) {\n        this.display = display;\n        this.game = display.game;\n        this.evaluator = new GameEvaluator(this.game.board, 1);\n        this.firstMovePlayed = false;\n    }\n\n    applyMove(x: number, y: number) {\n        this.placeToken(x, y);\n\n        if (this.game.isWinner(this.game.getCurrentPlayer())) {\n            this.makeWinner(this.game.getCurrentPlayer());\n        } else {\n            this.game.switchPlayer();\n\n            if (this.firstMovePlayed) {\n                setTimeout(this.aiMove.bind(this), 200);\n            } else {\n                setTimeout(this.aiRandomMove.bind(this), 200);\n            }\n        }\n    }\n\n    aiMove(): void {\n        let bestMove: HexNode;\n        if (this.firstMovePlayed) {\n            bestMove = this.evaluator.chooseBestMove(this.game.getCurrentPlayer());\n        } else if (this.game.getCurrentPlayer() === Token.RED) {\n            bestMove = this.evaluator.chooseOpeningRedMove();\n        }\n        this.placeToken(bestMove.x, bestMove.y);\n\n        if (this.game.isWinner(this.game.getCurrentPlayer())) {\n            this.makeWinner(this.game.getCurrentPlayer());\n        } else {\n            this.game.switchPlayer();\n        }\n        \n        this.display.drawGameInfo();\n    }\n\n    private aiRandomMove(): void {\n        let availableMoves: HexNode[] = [];\n        for (const node of this.game.board.playableNodes()) {\n            if (node.getToken() === Token.EMPTY) {\n                availableMoves.push(node);\n            }\n        }\n        if (availableMoves.length === 0) {\n            throw Error('No available moves');\n        }\n        const random = Math.floor (Math.random() * availableMoves.length);\n        const randomMove = availableMoves[random];\n        this.placeToken(randomMove.x, randomMove.y);\n\n        if (this.game.isWinner(this.game.getCurrentPlayer())) {\n            this.makeWinner(this.game.getCurrentPlayer());\n        } else {\n            this.game.switchPlayer();\n        }\n        this.display.drawGameInfo();\n    }\n\n    private placeToken(x: number, y: number) {\n        this.firstMovePlayed = true;\n        this.display.fillHexagon(x, y, this.game.getCurrentPlayer());\n        this.game.placeToken(x, y);\n    }\n\n    makeWinner(currentPlayer: Token.RED | Token.BLUE): void {\n        this.game.setWinner(currentPlayer);\n        this.display.disableInput();\n        const winBridge = this.game.getWinBridge();\n        this.display.highlightWinPath(winBridge);\n    }\n}","/**\n * Represents the three possible, singular states of each tile on the Hex game board.\n * The common convention is for red to go first.\n */\nexport enum Token {\n    RED,\n    BLUE,\n    EMPTY\n}","exports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {default: a};\n};\n\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\n\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (key === 'default' || key === '__esModule' || dest.hasOwnProperty(key)) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n};\n\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n","import { Board } from \"./Board\";\nimport { HexNode } from \"./HexNode\";\nimport { Token } from \"./Token\";\nimport {  } from \"module\";\n\nexport class GameEvaluator {\n    static readonly MINIMAX_MAX_VAL = 1000;\n    static readonly MINIMAX_MIN_VAL = -1000;\n    static readonly MAXIMIZER_TOKEN = Token.RED;\n    static readonly MINIMIZER_TOKEN = Token.BLUE;\n\n    static readonly openingMoves: HexNode[] = [\n        Board.Board11x11.getNode(1, 2),\n        Board.Board11x11.getNode(3, 0),\n        Board.Board11x11.getNode(5, 0),\n        Board.Board11x11.getNode(6, 0),\n        Board.Board11x11.getNode(7, 0),\n        Board.Board11x11.getNode(8, 0),\n        Board.Board11x11.getNode(9, 0),\n        Board.Board11x11.getNode(10, 0),\n        Board.Board11x11.getNode(2, 5),\n        Board.Board11x11.getNode(9, 2),\n        Board.Board11x11.getNode(8, 5),\n        Board.Board11x11.getNode(1, 8),\n        Board.Board11x11.getNode(0, 10),\n        Board.Board11x11.getNode(2, 10),\n        Board.Board11x11.getNode(3, 10),\n        Board.Board11x11.getNode(5, 10),\n        Board.Board11x11.getNode(6, 10),\n        Board.Board11x11.getNode(7, 10),\n        Board.Board11x11.getNode(8, 10)\n    ];\n    \n    private board: Board;\n    private searchDepth: number;\n\n    constructor(board: Board, searchDepth: number) {\n        this.board = board;\n        this.searchDepth = searchDepth;\n    }\n\n    chooseBestMove(tokenToPlace: Token.RED | Token.BLUE): HexNode {\n        if (tokenToPlace === Token.RED) {\n            return this.chooseBestMoveAsMaximizer();\n        }\n        return this.chooseBestMoveAsMinimizer();\n    }\n\n    chooseOpeningRedMove(): HexNode {\n        const rand1 = Math.floor(Math.random() * 3 + 4);\n        const rand2 = Math.floor(Math.random() * 3 + 4);\n        return this.board.getNode(rand1, rand2);\n    }\n\n    private chooseBestMoveAsMaximizer(): HexNode {\n        let max = GameEvaluator.MINIMAX_MIN_VAL - 1;\n        let bestMove: HexNode;\n\n        for (const node of this.board.playableNodes()) {\n            if (node.getToken() === Token.EMPTY) {\n                node.setToken(GameEvaluator.MAXIMIZER_TOKEN);\n                const evalResult = this.minimax(this.searchDepth, false);\n                node.setToken(Token.EMPTY);\n\n                if (evalResult > max) {\n                    max = evalResult;\n                    bestMove = node;\n                }\n            }\n        }\n        return bestMove;\n    }\n\n    private chooseBestMoveAsMinimizer(): HexNode {\n        let min = GameEvaluator.MINIMAX_MAX_VAL + 1;\n        let bestMove: HexNode;\n\n        for (const node of this.board.playableNodes()) {\n            if (node.getToken() === Token.EMPTY) {\n                node.setToken(GameEvaluator.MINIMIZER_TOKEN);\n                const evalResult = this.minimax(this.searchDepth, true);\n                node.setToken(Token.EMPTY);\n\n                if (evalResult < min) {\n                    min = evalResult;\n                    bestMove = node;\n                }\n            }\n        }\n        return bestMove;\n    }\n \n    private evaluate(): number {\n        const redMovesLeft = this.board.shortestPathLength(\n            this.board.topVirtualNode,\n            this.board.bottomVirtualNode,\n            Token.RED);\n        const blueMovesLeft = this.board.shortestPathLength(\n            this.board.leftVirtualNode,\n            this.board.rightVirtualNode,\n            Token.BLUE);\n        return blueMovesLeft - redMovesLeft;\n    }\n\n    private minimax(depth: number, isMax: boolean) {\n        return this._minimax(depth, isMax, GameEvaluator.MINIMAX_MIN_VAL, GameEvaluator.MINIMAX_MAX_VAL);\n    }\n\n    private _minimax(depth: number, isMax: boolean, alpha: number, beta: number): number {\n        const evaluation = this.evaluate();\n        \n        if (evaluation === GameEvaluator.MINIMAX_MAX_VAL) {\n            return GameEvaluator.MINIMAX_MAX_VAL;\n        }\n        if (evaluation === GameEvaluator.MINIMAX_MIN_VAL) {\n            return GameEvaluator.MINIMAX_MIN_VAL;\n        }\n        if (depth === 0) {\n            return evaluation;\n        }\n\n        const currentToken = isMax ? Token.RED : Token.BLUE;\n\n        if (isMax) {\n            let best = GameEvaluator.MINIMAX_MIN_VAL;\n            for (const node of this.board.nodes) {\n                if (node.getToken() === Token.EMPTY) {\n                    this.board.putToken(node.x, node.y, currentToken);\n                    best = Math.max(best, this._minimax(depth - 1, !isMax, alpha, beta));\n                    this.board.removeToken(node.x, node.y);\n\n                    if (best > beta) {\n                        break;\n                    }\n                    alpha = Math.max(alpha, best);\n                }\n            }\n            return best;\n        }\n        else {\n            let best = GameEvaluator.MINIMAX_MAX_VAL;\n            for (const node of this.board.nodes) {\n                if (node.getToken() === Token.EMPTY) {\n                    this.board.putToken(node.x, node.y, currentToken);\n                    best = Math.min(best, this._minimax(depth - 1, !isMax, alpha, beta));\n                    this.board.removeToken(node.x, node.y);\n\n                    if (best < alpha) {\n                        break;\n                    }\n                    beta = Math.min(beta, best);\n                }\n            }\n            return best;\n        }\n    }\n}","import { Token } from \"./Token\";\nimport { HexNode } from \"./HexNode\";\nimport { UnionFind } from \"./UnionFind\";\nimport { Deque } from \"./Deque\";\n\n/**\n * Model of the Hex game board, which is a grid of hexagonal \n * tiles (nodes) containing player tokens. \n */\nexport class Board {\n    public static readonly Board11x11 = new Board(11);\n    /**\n     * Returns the neighbors of a node at a given [x, y] position; excludes virtual nodes.\n     * \n     * @param x the x-coordinate of the node whose neighbors to get\n     * @param y the y-coordinate of the node whose neighbors to get\n     * @returns An array of indices representing the neighbor positions.\n     */\n    //TODO: make private\n    public static neighbors(index: number, size: number): number[] {\n        const i = Math.floor(index / size);\n        const j = index % size;\n\n       // top left corner\n       if (i === 0 && j == 0) {\n            return [1, size];\n       } \n       // bottom left corner\n       if (i === size - 1 && j === 0) {\n            return [size * (size - 2), size * (size - 2) + 1, size * (size - 1) + 1];\n       }\n       // bottom right corner\n       if (i === size - 1 && j === size - 1) {\n            return [size * (size - 1) - 1, size * size - 2];\n       }\n       // top right corner\n       if (i === 0 && j === size - 1) {\n            return [size - 2, 2 * size - 1, 2 * size - 2];\n       }\n       // top edge except corners\n       if (i === 0) {\n           return [index - 1, index + size - 1, index + size, index + 1];\n       }\n       // right edge except corners\n       if (j === size - 1) {\n           return [index - size, index - 1, index + size - 1, index + size];\n       }\n       // bottom edge except corners\n       if (i === size - 1) {\n           return [index - 1, index - size, index - size + 1, index + 1];\n       }\n       // left edge except corners\n       if (j === 0) {\n           return [index + size, index + 1, index - size + 1, index - size];\n       }\n       // not an edge or corner hexagon\n       return [\n           index - 1, \n           index - size, \n           index - size + 1, \n           index + 1,\n           index + size,\n           index + size - 1\n       ];\n    }\n\n    // virtual nodes on each of the four sides, which are used in \n    // path-finding algorithms but not the actual game\n    readonly topVirtualNode: HexNode;\n    readonly leftVirtualNode: HexNode;\n    readonly bottomVirtualNode: HexNode;\n    readonly rightVirtualNode: HexNode;\n\n    readonly size: number;\n    readonly nodes: HexNode[];\n\n     /**\n     * Given an integer n, creates an n * n game board. The primary data structure\n     * representing the board is a one-dimensional HexNode[] array of size (n * n + 4). \n     * The extra four nodes, which are placed on each side of the board and connected to the edge nodes\n     * at their respective side, are only used in order to make the path-finding algorithms more efficient.\n     * Otherwise, they are not used in the game in any way.\n     * \n     * @param size the number of nodes on an the board edge\n     */\n    constructor(size: number) {\n        if (size < 3 || size > 30) {\n            throw Error(\"Not a valid board size.\");\n        }\n        this.size = size;\n\n        // initialize HexNode array with size * size dimensions\n        // and add all non-virtual nodes to it\n        this.nodes = [];\n        for (let i = 0; i < size * size; i++) {\n            this.nodes.push(new HexNode(i, size));\n        }\n\n        // initialize virtual nodes and push to node array\n        this.topVirtualNode = new HexNode(size * size, size, true);\n        this.leftVirtualNode = new HexNode(size * size + 1, size, true);\n        this.bottomVirtualNode = new HexNode(size * size + 2, size, true);\n        this.rightVirtualNode = new HexNode(size * size + 3, size, true);\n\n        this.nodes.push(this.topVirtualNode);\n        this.nodes.push(this.leftVirtualNode);\n        this.nodes.push(this.bottomVirtualNode);\n        this.nodes.push(this.rightVirtualNode);\n\n        // set appropriate token for each virtual node\n        this.topVirtualNode.setToken(Token.RED);\n        this.bottomVirtualNode.setToken(Token.RED);\n        this.leftVirtualNode.setToken(Token.BLUE);\n        this.rightVirtualNode.setToken(Token.BLUE);\n\n        // set neighboring nodes for each non-virtual HexNode, including any \n        // neighbors which are virtual nodes\n        for (let i = 0; i < size * size; i++) {\n            const currentNode = this.nodes[i];\n            // add all neighbor nodes for every node in board\n            for (const index of Board.neighbors(i, size)) {\n                // add any connected non-virtual nodes\n                currentNode.addNeighbor(this.nodes[index]);\n            }\n            // add any connected virtual nodes\n            if (currentNode.atTopEdge()) {\n                currentNode.addNeighbor(this.topVirtualNode);\n            }\n            if (currentNode.atLeftEdge()) {\n                currentNode.addNeighbor(this.leftVirtualNode);\n            }\n            if (currentNode.atBottomEdge()) {\n                currentNode.addNeighbor(this.bottomVirtualNode);\n            }\n            if (currentNode.atRightEdge()) {\n                currentNode.addNeighbor(this.rightVirtualNode);\n            }\n        }\n\n        // set neighbors of each virtual node\n        this.topEdge().forEach(edgeNode => this.topVirtualNode.addNeighbor(edgeNode));\n        this.leftEdge().forEach(edgeNode => this.leftVirtualNode.addNeighbor(edgeNode));\n        this.bottomEdge().forEach(edgeNode => this.bottomVirtualNode.addNeighbor(edgeNode));\n        this.rightEdge().forEach(edgeNode => this.rightVirtualNode.addNeighbor(edgeNode));\n    }\n\n    private getIndex(x: number, y: number): number {\n        return x * this.size + y;\n    }\n\n    /**\n     * Gets the token on the board at the given (x, y) position\n     * \n     * @param x the x-coordinate of the token to retrieve\n     * @param y the y-coordinate of the token to retrieve\n     * @returns the token (RED, BLUE, or EMPTY) at the specified (x, y) position\n     */\n    getToken(x: number, y: number): Token {\n        return this.nodes[this.getIndex(x, y)].getToken();\n    }\n\n    /**\n     * Puts the token on the board at the given (x, y) position and updates the \n     * union-find structure\n     * \n     * @param x the x-coordinate at which to place the token\n     * @param y the y-coordinate at which to place the token\n     * @param token \n     * \n     * @throws will throw an error if specified position already contains a \n     * RED or BLUE token\n     */\n    putToken(x: number, y: number, token: Token.RED | Token.BLUE): void {\n        if (this.getToken(x, y) !== Token.EMPTY) {\n            throw new Error(`Board at ${x}, ${y} already has a token.`);\n        }\n        const index = this.getIndex(x, y);\n        const selectedNode = this.nodes[index];\n        selectedNode.setToken(token);\n    }\n\n    removeToken(x: number, y: number) {\n        const index = this.getIndex(x, y);\n        const selectedNode = this.nodes[index];\n        selectedNode.setToken(Token.EMPTY);\n    }\n\n    getNode(x: number, y: number): HexNode {\n        return this.nodes[this.getIndex(x, y)];\n    }\n\n    connected(node1: HexNode, node2: HexNode, token: Token.RED | Token.BLUE): boolean {\n        if (node1.index === node2.index) {\n            throw Error(\"Arguments cannot refer to the same node.\");\n        }\n        return this.shortestPathLength(node1, node2, token) === 0;\n    }\n\n    // TODO: remove console log statements\n    BFS(node1: HexNode, node2: HexNode, token: Token): HexNode[] {\n        console.log(node1);\n        console.log(node2);\n\n        if (node1.index === node2.index) {\n            throw Error(\"Arguments cannot refer to the same node.\");\n        }\n        // distance of each node from origin along bridge\n        const dist: number[] = new Array(this.allNodesCount()).fill(-1);\n\n        // shortest-paths tree to origin from connected nodes\n        const pathTree: number[] = new Array(this.allNodesCount());\n        for (let i = 0; i < pathTree.length; i++) {\n            pathTree[i] = i;\n        }\n\n        // queue used for BFS\n        const queue = new Deque<HexNode>();\n\n        // enqueue starting position\n        queue.addLast(node1);\n        dist[node1.index] = 0;\n\n        while (!queue.isEmpty()) {\n            const current = queue.dequeue();\n\n            for (const neighbor of current.getNeighbors()) {\n                if (neighbor.getToken() === token && dist[neighbor.index] === -1) {\n                    queue.addLast(neighbor);\n                    dist[neighbor.index] = dist[current.index] + 1;\n                    pathTree[neighbor.index] = current.index;\n                }\n            }\n        }\n\n        const path: HexNode[] = [];\n        let currIndex = node2.index;\n\n        while (currIndex !== node1.index) {\n            path.push(this.nodes[currIndex]);\n            currIndex = pathTree[currIndex];\n        }\n        path.push(this.nodes[currIndex]);\n        return path;\n    }\n\n    // shortest path algorithm, returns zero if a bridge exists\n    shortestPathLength(from: HexNode, to: HexNode, token: Token.RED | Token.BLUE): number {\n        if (from.index === to.index) {\n            throw Error(\"Arguments cannot refer to the same node.\");\n        }\n        const MAX_DIST = 1000;\n        const enemyToken = token === Token.RED ? Token.BLUE : Token.RED;\n\n        // distance of each node from origin along bridge\n        const dist: number[] = new Array(this.allNodesCount()).fill(MAX_DIST);\n\n        // shortest-paths tree to origin from connected nodes\n        const pathTree: number[] = new Array(this.allNodesCount());\n        for (let i = 0; i < pathTree.length; i++) {\n            pathTree[i] = i;\n        }\n\n        const deque = new Deque<HexNode>();\n\n        // enqueue starting position\n        deque.addLast(from);\n        dist[from.index] = 0;\n\n        while (!deque.isEmpty()) {\n            const currentNode = deque.dequeue();\n\n            for (const neighbor of currentNode.getNeighbors()) {\n                if (neighbor.getToken() === enemyToken) {\n                    continue;\n                }\n                const edgeWeight = neighbor.getToken() === token ? 0 : 1;\n\n                if (dist[neighbor.index] > dist[currentNode.index] + edgeWeight) {\n                    dist[neighbor.index] = dist[currentNode.index] + edgeWeight;\n                    pathTree[neighbor.index] = currentNode.index;\n\n                    if (neighbor.getToken() === Token.EMPTY) {\n                        deque.addFirst(neighbor);\n                    }\n                    if (neighbor.getToken() === token) {\n                        deque.addLast(neighbor);\n                    }\n                }\n            }\n        }\n        // console.log(\"Shortest path length for \" + token + \": \" + dist[to.index]);\n        return dist[to.index];\n    }\n\n    fillRandom(): void {\n        for (let i = 0; i < this.size; i++) {\n            for (let j = 0; j < this.size; j++) {\n                const rand = Math.floor(Math.random() * 2);\n                const token = rand === 0 ? Token.RED : Token.BLUE;\n                this.putToken(i, j, token);\n            }\n        }\n    }\n\n    /**\n     * Returns the total number of nodes in board, including \n     * virtual nodes\n     * \n     * @returns the total number of nodes in board\n     */\n    allNodesCount(): number {\n        return this.size * this.size + 4;\n    }\n\n    playableNodeCount(): number {\n        return this.size * this.size;\n    }\n\n    playableNodes(): HexNode[] {\n        return this.nodes.slice(0, this.playableNodeCount());\n    }\n\n    /**\n     * Returns the nodes in the top edge of the game board.\n     * \n     * @returns the nodes in the top edge as an array\n     */\n    private topEdge(): HexNode[] {\n        return this.nodes.slice(0, this.size);\n    }\n\n    /**\n     * Returns the nodes in the left edge of the game board.\n     * \n     * @returns the nodes in the left edge of the array\n     */\n    private leftEdge(): HexNode[] {\n        let leftNodes: HexNode[] = [];\n        for (let i = 0; i < this.size; i++) {\n            leftNodes.push(this.nodes[this.getIndex(i, 0)]);\n        }\n        return leftNodes;\n    }\n\n    /**\n     * Returns the nodes in the bottom edge of the game board.\n     * \n     * @returns the nodes in the bottom edge of the array\n     */\n    private bottomEdge(): HexNode[] {\n        return this.nodes.slice(this.size * (this.size - 1), this.size * this.size)\n    }\n\n    /**\n     * Returns the nodes in the right edge of the game board.\n     * \n     * @returns the nodes in the right edge of the array\n     */\n    private rightEdge(): HexNode[] {\n        let rightNodes = [];\n        for (let i = 0; i < this.size; i++) {\n            rightNodes.push(this.nodes[this.getIndex(i, this.size - 1)]);\n        }\n        return rightNodes;\n    }\n}\n\n","\"use strict\";\n\nimport { Token } from \"./Token\";\n\n/**\n * Represents a node on a Hex board. Can either be empty, or contain a single token;\n * also contains references to its neighbor nodes.\n */\nexport class HexNode {\n    // x and y-coordinate of HexNode\n    readonly x: number;\n    readonly y: number;\n\n    // size of the Hex board that node is part of\n    private readonly size: number;\n\n    // index of HexNode in 1D array\n    readonly index: number;\n\n    // boolean values representing whether node is virtual\n    readonly isVirtual: boolean;\n\n    // neighbor nodes of this node; these are set upon initialization of the HexBoard class\n    private neighbors: HexNode[] = [];\n\n    // current token occupying this node\n    private token: Token = Token.EMPTY;\n\n    /**\n     * Creates a HexNode at a given [x, y] position for a board of given size.\n     * \n     * @param n the index of the node\n     * @param size the size of the board where the node lives\n     */\n    constructor(index: number, size: number, isVirtual = false) {\n        if (size === 0 && !isVirtual) {\n            throw Error(\"Size argument must be passed for non-virtual node.\");\n        }\n\n        this.size = size;\n        this.index = index;\n        this.x = Math.floor(index / size);\n        this.y = index % size;\n        this.isVirtual = isVirtual;\n    }\n\n    getToken(): Token {\n        return this.token;\n    }\n\n    setToken(token: Token): void {\n        this.token = token;\n    }\n\n    addNeighbor(hexNode: HexNode): void {\n        this.neighbors.push(hexNode);\n    }\n\n    getNeighbors(): HexNode[] {\n        return this.neighbors;\n    }\n\n    atTopEdge(): boolean {\n        if (this.isVirtual) {\n            throw Error(\"Invalid caller: HexNode is virtual.\");\n        }\n        return this.x === 0;\n    }\n\n    atRightEdge(): boolean {\n        if (this.isVirtual) {\n            throw Error(\"Invalid caller: HexNode is virtual.\");\n        }\n        return this.y === this.size - 1;\n    }\n\n    atBottomEdge(): boolean {\n        if (this.isVirtual) {\n            throw Error(\"Invalid caller: HexNode is virtual.\");\n        }\n        return this.x === this.size - 1;\n    }\n\n    atLeftEdge(): boolean {\n        if (this.isVirtual) {\n            throw Error(\"Invalid caller: HexNode is virtual.\");\n        }\n        return this.y === 0;\n    }\n}","/**\n * Linked list implementation of a deque.\n */\n\nclass ListNode<E> {\n    val: E;\n    next: ListNode<E> | null;\n\n    constructor(val: E) {\n        this.val = val;\n        this.next = null;\n    }\n}\n\nexport class Deque<E> {\n    private head: ListNode<E> | null;\n    private tail: ListNode<E> | null;\n    private n: number;\n\n    constructor() {\n        this.head = null;\n        this.tail = null;\n        this.n = 0;\n    }\n\n    isEmpty(): boolean {\n        return this.n === 0;\n    }\n\n    size(): number {\n        return this.n;\n    }\n\n    addLast(item: E): void {\n        if (this.isEmpty()) {\n            this.head = new ListNode(item);\n            this.tail = this.head;\n        } else {\n            const newTail = new ListNode(item);\n            this.tail!.next = newTail;\n            this.tail = newTail;\n        }\n        this.n++;\n    }\n\n    // removes head from list and returns value\n    dequeue(): E {\n        if (this.isEmpty()) {\n            throw Error(\"Cannot dequeue from empty queue.\");\n        }\n        const removed = this.head!;\n        this.head = removed.next;\n\n        if (this.head === null) {\n            this.tail = null;\n        }\n        this.n--;\n        return removed.val;\n    }\n\n    addFirst(item: E): void {\n        const oldHead = this.head;\n        this.head = new ListNode(item);\n        this.head.next = oldHead;\n\n        if (oldHead === null) {\n            this.tail = this.head;\n        }\n        this.n++;\n    }\n }","\"use strict\";","\"use strict\";\n\nimport { Token } from \"./Token\";\nimport { Controller } from \"./Controller\";\nimport { Game } from \"./Game\";\nimport { HexNode } from \"./HexNode\";\nimport { LocalGameController } from \"./LocalGameController\";\nimport { AIGameController } from \"./AIGameController\";\n\nexport class Display {\n    static readonly CANVAS_HRZ_BORDER = 70;\n    static readonly CANVAS_VERT_BORDER = 50;\n\n    static readonly HEXAGON_SIDE_COUNT = 6;\n    static readonly HEXAGON_INTERIOR_ANGLE = Math.PI / 3;\n\n    static readonly FONT = \"bold 16px sans-serif\";\n    static readonly FONT_COLOR = \"white\";\n\n    static readonly BOARD_COLOR = \"#46424f\";\n    static readonly RED_COLOR_VALUE = \"red\";\n    static readonly BLUE_COLOR_VALUE = \"blue\";\n    static readonly RED_HOVER_COLOR = \"rgba(200, 0, 0, 0.3)\";\n    static readonly BLUE_HOVER_COLOR = \"rgba(0, 0, 200, 0.3)\";\n    static readonly TRAIL_COLOR_VALUE = \"yellow\";\n    static readonly EMPTY_TILE_COLOR = \"lightgrey\";\n\n    static readonly GRID_ORIGIN_X = this.CANVAS_HRZ_BORDER;\n    static readonly GRID_ORIGIN_Y = this.CANVAS_VERT_BORDER;\n\n    readonly GAME_INFO = document.getElementById(\"game-info\");\n    readonly CANVAS = document.getElementById(\"game-canvas\") as HTMLCanvasElement;\n    readonly CTX = this.CANVAS.getContext(\"2d\");\n    readonly CANVAS_HEIGHT = this.CANVAS.clientHeight;\n    readonly CANVAS_WIDTH = this.CANVAS.clientWidth;\n    readonly CANVAS_ORIGIN_X = this.CANVAS.offsetLeft + this.CANVAS.clientLeft;\n    readonly CANVAS_ORIGIN_Y = this.CANVAS.offsetTop + this.CANVAS.clientTop;\n\n    readonly gap: number;\n    readonly sideCount: number;\n    readonly hexRadius: number;\n    readonly hexFlatToFlat: number;\n    readonly bottomOffset: number;\n    readonly totalGapLength: number;\n\n    private readonly hexPaths2D: Path2D[][];\n\n    public inputActive: boolean;\n    private activeHoverNode: Path2D | null;\n\n    // view can access the game object to get information about it, but should not \n    // modify it in any way\n    readonly game: Game;\n    private controller: Controller;\n\n    constructor(gap: number, game: Game) {\n        this.gap = gap;\n        this.game = game;\n        this.sideCount = game.board.size;\n\n        this.hexRadius = (this.CANVAS_HEIGHT / this.sideCount) * 0.5;\n        this.hexFlatToFlat = this.hexRadius * Math.sqrt(3);\n        this.bottomOffset = this.hexFlatToFlat / 2 * this.sideCount;\n        this.totalGapLength = gap * (this.sideCount + 1);\n\n        this.hexPaths2D = this.createHexPaths2D(Display.GRID_ORIGIN_X, Display.GRID_ORIGIN_Y);\n        this.inputActive = true;\n        this.activeHoverNode = null;\n\n        this.CTX.fillStyle = Display.BOARD_COLOR;\n        this.CTX.fillRect(0, 0, this.CANVAS_WIDTH, this.CANVAS_HEIGHT);\n    }\n\n    /**\n     * Draws a grid of hexagons to the canvas.\n     */\n    private drawHexagons(): void {\n        this.CTX.fillStyle = Display.EMPTY_TILE_COLOR;\n        for (const row of this.hexPaths2D) {\n            for (const path of row) {\n                this.CTX.fill(path);\n            }\n        }\n    }\n\n    drawBorder(): void {\n        // draw red border\n        this.CTX.fillStyle = Display.RED_COLOR_VALUE;\n    }\n\n    private drawText(): void {\n        this.CTX.font = Display.FONT;\n        this.CTX.fillStyle = Display.FONT_COLOR;\n\n        const letters = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\"];\n        const coordOriginX = Display.CANVAS_HRZ_BORDER + this.bottomOffset + this.gap * 3;\n        const coordOriginY = Display.CANVAS_VERT_BORDER + (this.hexFlatToFlat / 2 * Math.sqrt(3) + this.gap) * this.sideCount;\n\n        // draw column letters\n        for (let i = 0; i < this.sideCount; i++) {\n            this.CTX.fillText(\n                letters[i], \n                coordOriginX + (this.hexFlatToFlat + this.gap) * i,\n                coordOriginY);\n        }\n        // draw row numbers\n        for (let j = 0; j < this.sideCount; j++) {\n            const numText = (j + 1).toString();\n            const numTextWidth = this.CTX.measureText(numText).width;\n            this.CTX.fillText(\n                numText,\n                (30 - numTextWidth) + (this.gap / 2 + this.hexFlatToFlat / 2) * j,\n                Display.CANVAS_VERT_BORDER + 2 + this.gap + (this.gap + this.hexFlatToFlat / 2 * Math.sqrt(3)) * j\n            );\n        }\n\n    }\n\n    private drawGameInfo(): void {\n        if (this.game.isGameOver()) {\n            this.GAME_INFO.textContent = (this.game.getWinner() === Token.RED ? \"Red\" : \"Blue\") + \" won!\";\n        } else {\n            this.GAME_INFO.textContent = (this.game.getCurrentPlayer() === Token.RED ? \"Red\" : \"Blue\") + \" to move.\";\n        }\n    }\n\n    /**\n     * Draws current game state to canvas.\n     */\n    draw(): void {\n        this.drawHexagons();\n        this.drawText();\n        this.drawGameInfo();\n    }\n\n    /**\n     * Fills hexagon at (x, y) position with given color, representing a token placed.\n     * \n     * @param x the x-position of the hexagon to fill\n     * @param y the y-position of the hexagon to fill\n     * @param token the token color used to fill the hexagon\n     */\n    fillHexagon(x: number, y: number, token: Token.RED | Token.BLUE): void {\n        const path2D = this.hexPaths2D[x][y];\n        if (token === Token.RED) {\n            this.CTX.fillStyle = Display.RED_COLOR_VALUE;\n        } else {\n            this.CTX.fillStyle = Display.BLUE_COLOR_VALUE;\n        }\n        this.CTX.fill(path2D);\n    }\n\n    highlightWinPath(nodes: HexNode[]): void {\n        this.CTX.fillStyle = Display.TRAIL_COLOR_VALUE;\n\n        let i = 1;\n        for (const node of nodes) {\n            const path2d = this.hexPaths2D[node.x][node.y];\n            setInterval(() => this.CTX.fill(path2d), i * 250);\n            i++;\n        }\n    }\n\n    showThinkingIcon(): void {\n        this.CTX.fillStyle = Display.FONT_COLOR;\n        this.CTX.fillText(\"thinking...\", 600, 180);\n    }\n\n    hideThinkingIcon(): void {\n        this.CTX.fillStyle = Display.BOARD_COLOR;\n        this.CTX.fillRect(600, 10, 100, 100);\n    }\n\n    /**\n     * Creates a hexagon Path2D object with the given location and size.\n     * \n     * @param centerX the center x-coordinate of hexagon\n     * @param centerY the center y-coordinate of hexagon\n     * @param r the radius of the hexagon, which also equals its side length\n     * @returns the hexagon Path2D object\n     */\n    private hexPath2D(centerX: number, centerY: number, r: number): Path2D {\n        let x = centerX;\n        let y = centerY - r;\n        const path = new Path2D();\n        path.moveTo(x, y);\n\n        for (let i = 0; i < Display.HEXAGON_SIDE_COUNT; i++) {\n            x += r * Math.cos(Display.HEXAGON_INTERIOR_ANGLE / 2 + i * Display.HEXAGON_INTERIOR_ANGLE);\n            y += r * Math.sin(Display.HEXAGON_INTERIOR_ANGLE / 2 + i * Display.HEXAGON_INTERIOR_ANGLE);\n            path.lineTo(x, y);\n        }\n        return path;\n    }\n\n    /**\n     * Creates an array of Path2D objects representing the game board.\n     * \n     * @param startCenterX the center x-coordinate of the top left hexagon within the grid\n     * @param startCenterY the center y-coordinate of the top left hexagon within the grid\n     * @returns an array of Path2D objects representing the hexagon tiles\n     */\n    private createHexPaths2D(startCenterX: number, startCenterY: number): Path2D[][] {\n        const hexPaths2D: Path2D[][] = [];\n        for (let i = 0; i < this.sideCount; i++) {\n            hexPaths2D.push([]);\n        }\n\n        // TODO: clean up all derived values\n        const rowOffset = this.hexFlatToFlat / 2 * Math.sqrt(3);\n        let currentX = startCenterX;\n        let currentY = startCenterY;\n\n        for (let i = 0; i < this.sideCount; i++) {\n            currentX = startCenterX + (this.hexFlatToFlat / 2 + this.gap / 2) * i;\n            for (let j = 0; j < this.sideCount; j++) {\n                hexPaths2D[i].push(this.hexPath2D(currentX, currentY, this.hexRadius));\n                currentX = currentX + this.gap + this.hexFlatToFlat;\n            }\n            currentY = currentY + this.gap + rowOffset;\n        }\n        return hexPaths2D;\n    }\n\n    clearDisplay(): void {\n        this.CTX.fillStyle = \"white\";\n        this.CTX.fillRect(\n            this.CANVAS_ORIGIN_X, \n            this.CANVAS_ORIGIN_Y,\n            this.CANVAS_WIDTH,\n            this.CANVAS_HEIGHT);\n    }\n\n    disableInput(): void {\n        this.inputActive = false;\n    }\n\n    enableInput(): void {\n        this.inputActive = true;\n    }\n\n    addInputHandling(controller: Controller): void {\n        this.controller = controller;\n\n        // add click events to tiles\n        this.CANVAS.addEventListener(\"click\", (event) => {\n            if (!this.inputActive) {\n                return;\n            }\n            const x = event.pageX - this.CANVAS_ORIGIN_X;\n            const y = event.pageY - this.CANVAS_ORIGIN_Y;\n        \n            for (let i = 0; i < this.sideCount; i++) {\n                for (let j = 0; j < this.sideCount; j++) {\n                    const path = this.hexPaths2D[i][j];\n                    if (this.CTX.isPointInPath(path, x, y) \n                            && this.game.getToken(i, j) === Token.EMPTY) {\n                        this.activeHoverNode = null;\n                        controller.applyMove(i, j);\n                        this.drawGameInfo();\n                        return;\n                    }\n                }\n            }\n        });\n\n        // TODO: wrong hover color when playing AI after turn change\n        this.CANVAS.addEventListener(\"mousemove\", (event) => {\n            if (!this.inputActive) {\n                return;\n            }\n            const x = event.pageX - this.CANVAS_ORIGIN_X;\n            const y = event.pageY - this.CANVAS_ORIGIN_Y;\n\n            const tokenToPlace = this.game.getCurrentPlayer();\n            const color = tokenToPlace === \n                Token.RED ? Display.RED_HOVER_COLOR : Display.BLUE_HOVER_COLOR;\n\n            const oldHoverNode = this.activeHoverNode;\n            for (let i = 0; i < this.sideCount; i++) {\n                for (let j = 0; j < this.sideCount; j++) {\n                    const path = this.hexPaths2D[i][j];\n\n                    if (this.CTX.isPointInPath(path, x, y) \n                            && this.game.getToken(i, j) === Token.EMPTY) {\n                        if (path === this.activeHoverNode) {\n                            this.CTX.fillStyle = Display.EMPTY_TILE_COLOR;\n                            this.CTX.fill(path);\n                            this.CTX.fillStyle = color;\n                            this.CTX.fill(path);\n                        } else {\n                            if (this.activeHoverNode !== null) {\n                                this.CTX.fillStyle = Display.EMPTY_TILE_COLOR;\n                                this.CTX.fill(this.activeHoverNode);\n                            }\n                            this.CTX.fill(path);\n                            this.activeHoverNode = path;\n                        }\n                        return;\n                    }\n                }\n            }\n            if (this.activeHoverNode !== null) {\n                this.CTX.fillStyle = Display.EMPTY_TILE_COLOR;\n                this.CTX.fill(this.activeHoverNode);\n                this.activeHoverNode = null;\n            }\n        });\n\n        // cursor changes to pointer when hovering over canvas\n        this.CANVAS.addEventListener(\"mouseenter\", () => {\n            document.body.style.cursor = \"pointer\";\n        });\n\n        // cursor reverts to default when leaving canvas\n        this.CANVAS.addEventListener(\"mouseleave\", () => {\n            document.body.style.cursor = \"default\";\n        });\n    }\n}","import { Token } from \"./Token\";\nimport { Board } from \"./Board\";\nimport { HexNode } from \"./HexNode\";\n\nexport class Game {\n    board: Board; // TODO: make private\n\n    private currentPlayer: Token.RED | Token.BLUE;\n    private winner: Token.RED | Token.BLUE | null;\n\n    constructor(boardSize: number) {\n        this.board = new Board(boardSize);\n        this.currentPlayer = Token.RED;\n        this.winner = null;\n    }\n\n    getToken(x: number, y: number): Token {\n        return this.board.getToken(x, y);\n    }\n\n    placeToken(x: number, y: number): void {\n        this.board.putToken(x, y, this.currentPlayer);\n    }\n\n    playTurn(x: number, y: number): void {\n        if (this.isGameOver()) {\n            throw Error(\"Game has already ended.\");\n        }\n        this.board.putToken(x, y, this.currentPlayer);\n        if (this.isWinner(this.currentPlayer)) {\n            this.winner = this.currentPlayer;\n        } else {\n            this.switchPlayer();\n        }\n    }\n\n    getCurrentPlayer(): Token.RED | Token.BLUE {\n        return this.currentPlayer;\n    }\n\n    isGameOver(): boolean {\n        return this.winner !== null;\n    }\n\n    getWinner(): Token.RED | Token.BLUE {\n        if (this.winner === null) {\n            throw Error(\"Game is not over\");\n        }\n        return this.winner;\n    }\n\n    setWinner(token: Token.RED | Token.BLUE): void {\n        if (this.isGameOver()) {\n            throw new Error(\"Game is already over.\");\n        }\n        this.winner = token;\n    }\n\n    switchPlayer(): void {\n        this.currentPlayer = this.currentPlayer === Token.RED ? Token.BLUE : Token.RED;\n    }\n\n    isWinner(token: Token.RED | Token.BLUE): boolean {\n        if (token === Token.RED) {\n            return this.board.connected(\n                this.board.topVirtualNode,\n                this.board.bottomVirtualNode,\n                token\n            );\n        } \n        return this.board.connected(\n            this.board.leftVirtualNode,\n            this.board.rightVirtualNode,\n            token \n        );\n    }\n\n    getWinBridge(): HexNode[] {\n        if (!this.isGameOver()) {\n            throw Error(\"Game is not over.\");\n        }\n        if (this.getWinner() === Token.RED) {\n            return this.board.BFS(\n                this.board.topVirtualNode,\n                this.board.bottomVirtualNode,\n                Token.RED\n            ).slice(1, -1);\n        } else {\n            return this.board.BFS(\n                this.board.leftVirtualNode,\n                this.board.rightVirtualNode,\n                Token.BLUE\n            ).slice(1, -1);\n        }\n    }\n}","import { Controller } from \"./Controller\";\nimport { Display } from \"./Display\";\nimport { Game } from \"./Game\";\nimport { Token } from \"./Token\";\n\nexport class LocalGameController implements Controller {\n    private display: Display;\n    private game: Game;\n    private firstPlayerMoved: boolean;\n\n    constructor(display: Display) {\n        this.display = display;\n        this.game = display.game;\n        this.firstPlayerMoved = false;\n    }\n\n    applyMove(x: number, y: number) {\n        const currentPlayer = this.game.getCurrentPlayer();\n        this.display.fillHexagon(x, y, currentPlayer);\n        this.game.placeToken(x, y);\n\n        if (this.game.isWinner(currentPlayer)) {\n            this.makeWinner(currentPlayer);\n        } else {\n            this.game.switchPlayer();\n        }\n        this.display.drawGameInfo();\n    }\n\n    makeWinner(currentPlayer: Token.RED | Token.BLUE): void {\n            this.game.setWinner(currentPlayer);\n            this.display.disableInput();\n            const winBridge = this.game.getWinBridge();\n            this.display.highlightWinPath(winBridge);\n    }\n}"],"names":[],"version":3,"file":"index.d798abb8.js.map","sourceRoot":"/__parcel_source_root/"}